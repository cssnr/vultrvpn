version: '3.9'

services:
  nginx:
    build: ./nginx
    image: registry.hosted-domains.com/shane/vultrvpn-nginx:${VERSION}
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.routers.STACK_NAME-http.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-http.entrypoints=http"
        - "traefik.http.routers.STACK_NAME-http.middlewares=https-redirect"
        - "traefik.http.routers.STACK_NAME-https.rule=Host(${TRAEFIK_HOST})"
        - "traefik.http.routers.STACK_NAME-https.entrypoints=https"
        - "traefik.http.routers.STACK_NAME-https.tls=true"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.port=80"
        - "traefik.http.services.STACK_NAME.loadbalancer.server.scheme=http"
    volumes:
      - data_dir:/data
    secrets:
      - source: cssnr_basic_http_auth
        target: /etc/nginx/auth.users
    networks:
      - traefik-public
      - net-internal
    depends_on:
      - app

  app:
    build: ./app
    image: registry.hosted-domains.com/shane/vultrvpn-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "gunicorn vultrvpn.wsgi:application -w 2 -b 0.0.0.0:9000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname==docker01.hosted-domains.com"
    volumes:
      - data_dir:/data
    networks:
      - net-internal
    depends_on:
      - redis

  worker:
    image: registry.hosted-domains.com/shane/vultrvpn-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "celery -A vultrvpn worker -l INFO -c 2"
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.hostname==docker01.hosted-domains.com"
    networks:
      - net-internal
    depends_on:
      - app
      - redis

  beat:
    image: registry.hosted-domains.com/shane/vultrvpn-app:${VERSION}
    env_file: ${ENV_FILE}
    command: "celery -A vultrvpn beat -l INFO -S django"
    deploy:
      replicas: 1
    networks:
      - net-internal
    depends_on:
      - app
      - redis

  flower:
    image: mher/flower
    env_file: ${ENV_FILE}
    deploy:
      replicas: 1
    volumes:
      - flower_data:/data
    networks:
      - net-internal
    depends_on:
      - app
      - redis

  redis:
    image: redis:6-alpine
    command: "redis-server --appendonly yes"
    deploy:
      replicas: 1
    volumes:
      - redis_data:/data
    networks:
      - net-internal

secrets:
  cssnr_basic_http_auth:
    external: true

volumes:
  data_dir:
    driver: local
    driver_opts:
      type: nfs
      o: "addr=${NFS_HOST},rw"
      device: ":${NFS_DIRECTORY}"
  flower_data:
  redis_data:

networks:
  net-internal:
    driver: overlay
  traefik-public:
    external: true
